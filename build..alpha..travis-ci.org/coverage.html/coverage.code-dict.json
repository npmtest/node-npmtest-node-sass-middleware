{"/home/travis/build/npmtest/node-npmtest-node-sass-middleware/test.js":"/* istanbul instrument in package npmtest_node_sass_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sass-middleware/lib.npmtest_node_sass_middleware.js":"/* istanbul instrument in package npmtest_node_sass_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_sass_middleware = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_sass_middleware = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sass-middleware/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-sass-middleware && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_sass_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_sass_middleware\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_sass_middleware.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_sass_middleware.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_sass_middleware.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_sass_middleware.__dirname +\n                    '/lib.npmtest_node_sass_middleware.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sass-middleware/node_modules/node-sass-middleware/middleware.js":"\"use strict\";\n\nvar sass = require('node-sass'),\n    util = require('util'),\n    fs = require('fs'),\n    url = require('url'),\n    dirname = require('path').dirname,\n    mkdirp = require('mkdirp'),\n    join = require('path').join;\n\nvar imports = {};\n\n/**\n * Return Connect middleware with the given `options`.\n *\n * Options:\n *\n *    all supportend options from node-sass project plus following:\n *\n *    `src`            Source directory used to find .scss files\n *    `dest`           Destination directory used to output .css files when undefined defaults to `src`\n *    `root`           A base path for both source and destination directories\n *    `prefix`         It will tell the sass compiler that any request file will always be prefixed\n *                     with <prefix> and this prefix should be ignored.\n *    `force`          Always re-compile\n *    `debug`          Output debugging information\n *    `response`       True (default) to write output directly to response instead of to a file\n *    `error`          A function to be called when something goes wrong\n *    `maxAge`         MaxAge to be passed in Cache-Control header\n *    `log`            function(severity, key, val), used to log data instead of the default `console.error`\n *\n *\n * Examples:\n *\n * Pass the middleware to Connect, grabbing .scss files from this directory\n * and saving .css files to _./public_.\n *\n * Following that we have a `staticProvider` layer setup to serve the .css\n * files generated by Sass.\n *\n *   var server = connect()\n *      .use(middleware({\n *        src: __dirname,\n *        dest: __dirname,\n *      }))\n *      .use(function(err, req, res, next) {\n *        res.statusCode = 500;\n *        res.end(err.message);\n *      });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options) {\n  options = options || {};\n\n  // Accept single src/dest dir\n  if (typeof options == 'string') {\n    options = { src: options };\n  }\n\n  // Source directory (required)\n  var src = options.src || function() {\n    throw new Error('sass.middleware() requires \"src\" directory.');\n  }();\n  // Destination directory (source by default)\n  var dest = options.dest || src;\n  // Optional base path for src and dest\n  var root = options.root || null;\n\n  // Force compilation everytime\n  var force = options.force || options.response;\n  // Enable debug output\n  var debug = options.debug;\n\n  var sassExtension = (options.indentedSyntax === true) ? '.sass' : '.scss';\n\n  var sourceMap = options.sourceMap || null;\n\n  var maxAge = options.maxAge || 0;\n\n  //Allow custom log function or default one\n  var log = options.log || function(severity, key, val, text) {\n    if (!debug && severity === 'debug') { // skip debug when debug is off\n      return;\n    }\n\n    text = text || '';\n\n    if (typeof (console[severity]) === 'function') {\n      console[severity]('[sass]  \\x1B[90m%s:\\x1B[0m \\x1B[36m%s %s\\x1B[0m', key, val, text);\n    } else {\n      console.error('[sass]  \\x1B[90m%s:\\x1B[0m \\x1B[36m%s %s\\x1B[0m', key, val, text);\n    }\n  };\n\n  // Default compile callback\n  options.compile = options.compile || function() {\n    return sass;\n  };\n\n  // Middleware\n  return function sass(req, res, next) {\n    var sassMiddlewareError = null;\n\n    // This function will be called if something goes wrong\n    var error = function(err, errorMessage) {\n      log('error', 'error', errorMessage || err);\n\n      if (options.error) {\n        options.error(err);\n      }\n\n      sassMiddlewareError = err;\n    };\n\n    if (req.method != 'GET' && req.method != 'HEAD') {\n      return next();\n    }\n\n    var path = url.parse(req.url).pathname;\n\n    if (!/\\.css$/.test(path)) {\n      log('debug', 'skip', path, 'nothing to do');\n      return next();\n    }\n\n    if (options.prefix) {\n      if (0 === path.indexOf(options.prefix)) {\n        path = path.substring(options.prefix.length);\n      } else {\n        log('debug', 'skip', path, 'prefix mismatch');\n        return next();\n      }\n    }\n\n    var cssPath = join(dest, path),\n        sassPath = join(src, path.replace(/\\.css$/, sassExtension)),\n        sassDir = dirname(sassPath);\n\n    if (root) {\n      cssPath = join(root, dest, path.replace(new RegExp('^' + dest), ''));\n      sassPath = join(root, src, path\n          .replace(new RegExp('^' + dest), '')\n          .replace(/\\.css$/, sassExtension));\n      sassDir = dirname(sassPath);\n    }\n\n    log('debug', 'source', sassPath);\n    log('debug', 'dest', options.response ? '<response>' : cssPath);\n\n    // When render is done, respond to the request accordingly\n    var done = function(err, result) {\n      if (err) {\n        var file = sassPath;\n        if (err.file && err.file != 'stdin') {\n          file = err.file;\n        }\n\n        var fileLineColumn = file + ':' + err.line + ':' + err.column;\n        var errorMessage = '\\x07\\x1B[31m' + err.message.replace(/^ +/, '') + '\\n\\nin ' + fileLineColumn + '\\x1B[91m';\n\n        error(err, errorMessage);\n        return next(err);\n      }\n\n      var data = result.css;\n\n      log('debug', 'render', options.response ? '<response>' : sassPath);\n\n      if (sourceMap) {\n        log('debug', 'render', this.options.sourceMap);\n      }\n      imports[sassPath] = result.stats.includedFiles;\n\n      var cssDone = true;\n      var sourceMapDone = true;\n\n      function doneWriting() {\n        if (!cssDone || !sourceMapDone) {\n          return;\n        }\n\n        if (options.response === false) {\n          return next(sassMiddlewareError);\n        }\n\n        res.writeHead(200, {\n          'Content-Type': 'text/css',\n          'Cache-Control': 'max-age=' + maxAge\n        });\n        res.end(data);\n      }\n\n      // If response is true, do not write to file\n      if (options.response) {\n        return doneWriting();\n      }\n\n      cssDone = false;\n      sourceMapDone = !sourceMap;\n\n      mkdirp(dirname(cssPath), '0700', function(err) {\n        if (err) {\n          error(err);\n          cssDone = true;\n          return doneWriting();\n        }\n\n        fs.writeFile(cssPath, data, 'utf8', function(err) {\n          log('debug', 'write', cssPath);\n\n          if (err) {\n            error(err);\n          }\n\n          cssDone = true;\n          doneWriting();\n        });\n      });\n\n      if (sourceMap) {\n        var sourceMapPath = this.options.sourceMap;\n        mkdirp(dirname(sourceMapPath), '0700', function(err) {\n          if (err) {\n            error(err);\n            sourceMapDone = true;\n            return doneWriting();\n          }\n\n          fs.writeFile(sourceMapPath, result.map, 'utf8', function(err) {\n            log('debug', 'write', sourceMapPath);\n\n            if (err) {\n              error(err);\n            }\n\n            sourceMapDone = true;\n            doneWriting();\n          });\n        });\n      }\n    }\n\n    // Compile to cssPath\n    var compile = function() {\n      fs.exists(sassPath, function(exists) {\n        log('debug', 'read', sassPath);\n\n        if (!exists) {\n          log('debug', 'skip', sassPath, 'does not exist');\n          return next();\n        }\n\n        imports[sassPath] = undefined;\n\n        var style = options.compile();\n\n        var renderOptions = util._extend({}, options);\n\n        renderOptions.file = sassPath;\n        renderOptions.outFile = options.outFile || cssPath;\n        renderOptions.includePaths = [sassDir].concat(options.includePaths || []);\n\n        style.render(renderOptions, done);\n      });\n    };\n\n    // Force\n    if (force) {\n      return compile();\n    }\n\n    // Re-compile on server restart, disregarding\n    // mtimes since we need to map imports\n    if (!imports[sassPath]) {\n      return compile();\n    }\n\n    // Compare mtimes\n    fs.stat(sassPath, function(err, sassStats) {\n      if (err) { // sassPath can't be accessed, nothing to compile\n        log('debug', 'skip', sassPath, 'is unreadable');\n        return next();\n      }\n\n      fs.stat(cssPath, function(err, cssStats) {\n        if (err) {\n          if ('ENOENT' === err.code) { // CSS has not been compiled, compile it!\n            log('debug', 'compile', cssPath, 'was not found');\n            return compile();\n          }\n\n          error(err);\n          return next(err);\n        }\n\n        if (sassStats.mtime > cssStats.mtime) { // Source has changed, compile it\n          log('debug', 'compile', sassPath, 'was modified');\n          return compile();\n        }\n\n        // Already compiled, check imports\n        checkImports(sassPath, cssStats.mtime, function(changed) {\n          if (debug && changed && changed.length) {\n            changed.forEach(function(path) {\n              log('debug', 'compile', path, '(import file) was modified');\n            });\n          }\n          changed && changed.length ? compile() : next();\n        });\n      });\n    });\n  }\n};\n\n/**\n * Check `path`'s imports to see if they have been altered.\n *\n * @param {String} path\n * @param {Function} fn\n * @api private\n */\n\nfunction checkImports(path, time, fn) {\n  var nodes = imports[path];\n  if (!nodes || !nodes.length) {\n    return fn();\n  }\n\n  var pending = nodes.length,\n      changed = [];\n\n  // examine the imported files (nodes) for each parent sass (path)\n  nodes.forEach(function(imported) {\n    fs.stat(imported, function(err, stat) {\n      // error or newer mtime\n      if (err || stat.mtime >= time) {\n        changed.push(imported);\n      }\n      // decrease pending, if 0 call fn with the changed imports\n      --pending || fn(changed);\n    });\n  });\n}\n"}